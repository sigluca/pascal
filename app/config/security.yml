# you can read more about security in the related section of the documentation
# http://symfony.com/doc/current/book/security.html
security:
    
   # Ci vuole       
    acl:
        connection: default  
        
    # http://symfony.com/doc/current/book/security.html#encoding-the-user-s-password
    encoders:
        #Symfony\Component\Security\Core\User\User: plaintext
        FOS\UserBundle\Model\UserInterface: sha512        

    # http://symfony.com/doc/current/book/security.html#hierarchical-roles
    role_hierarchy:
# SONATA USER ADMIN
        #ROLE_ADMIN:       [ROLE_USER, ROLE_SONATA_ADMIN]
        #ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
        #SONATA: ROLE_SONATA_PAGE_ADMIN_PAGE_EDIT  # if you are using acl then this line must be commented
        
        
    role_hierarchy:
        # for convenience, I decided to gather Sonata roles here
        ROLE_SONATA_READER:
            - ROLE_SONATA_ADMIN_AZIENDA_LIST
            - ROLE_SONATA_ADMIN_PROVINCIA_VIEW
        ROLE_SONATA_EDITOR:
            - ROLE_SONATA_ADMIN_AZIENDA_CREATE
            - ROLE_SONATA_ADMIN_PROVINCIA_EDIT
        ROLE_SONATA_ADMIN:
            - ROLE_SONATA_ADMIN_AZIENDA_DELETE
            - ROLE_SONATA_ADMIN_PROVINCIA_EXPORT
        # those are the roles I will use (less verbose)
        ROLE_STAFF:             [ROLE_USER, ROLE_SONATA_READER]
        ROLE_EDITOR:            [ROLE_STAFF, ROLE_SONATA_EDITOR]
        ROLE_ADMIN:             [ROLE_EDITOR, ROLE_SONATA_ADMIN]
        ROLE_SUPER_ADMIN:       [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    # set access_strategy to unanimous, else you may have unexpected behaviors
    access_decision_manager:
        strategy: unanimous
        
# /SONATA USER ADMIN

    # http://symfony.com/doc/current/book/security.html#where-do-users-come-from-user-providers
    providers:
        #in_memory:
        #    memory:
        #        users:
        #            user:  { password: userpass, roles: [ 'ROLE_USER' ] }
        #            admin: { password: adminpass, roles: [ 'ROLE_ADMIN' ] }

# SONATA USER ADMIN
                                       
        fos_userbundle:
            id: fos_user.user_manager
# /SONATA USER ADMIN


    # the main part of the security, where you can set up firewalls
    # for specific sections of your app
    firewalls:
        # disables authentication for assets and the profiler, adapt it according to your needs
        dev:
            pattern:  ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # SONATA ADMIN USER
        # -> custom firewall for the admin area of the URL
        admin:
            pattern:            /admin(.*)
            context:            user
            form_login:
                provider:       fos_userbundle
                login_path:     /admin/login
                use_forward:    false
                check_path:     /admin/login_check
                failure_path:   null
            logout:
                path:           /admin/logout
            anonymous:          true

        # -> end custom configuration
        
        # This firewall is used to handle the public login area
        # This part is handled by the FOS User Bundle
        main:
            pattern:             .*
            context:             user
            form_login:
                provider:       fos_userbundle
                login_path:     /login
                use_forward:    false
                check_path:     /login_check
                failure_path:   null
            logout:             true
            anonymous:          true
            
        # /SONATA ADMIN USER

    # with these settings you can restrict or allow access for different parts
    # of your application based on roles, ip, host or methods
    # http://symfony.com/doc/current/cookbook/security/access_control.html

    # SONATA ADMIN USER

    access_control:
        # URL of FOSUserBundle which need to be available to anonymous users
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }

        # Admin login page needs to be access without credential
        - { path: ^/admin/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/logout$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/login_check$, role: IS_AUTHENTICATED_ANONYMOUSLY }

        # Secured part of the site
        # This config requires being logged for the whole site and having the admin role for the admin part.
        # Change these rules to adapt them to your needs
        - { path: ^/admin/, role: [ROLE_STAFF] }
        - { path: ^/.*, role: IS_AUTHENTICATED_ANONYMOUSLY }        

    # SONATA ADMIN USER
        
        
 